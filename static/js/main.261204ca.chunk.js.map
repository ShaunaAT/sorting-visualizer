{"version":3,"sources":["logo.svg","sorting_algorithms/quickSort.js","sorting_algorithms/mergeSort.js","sorting_algorithms/heapSort.js","sorting_visualizer/sortingVisualizer.jsx","sorting_algorithms/bubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["animations","quicksortHelper","array","length","quicksort","swap","i","j","temp","left","right","pivot","pivotIndex","pivotValue","push","partition","mergeSort","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","heapSortHelper","n","heapify","heapSort","max","DEFAULT_BACKGROUND","SWITCH_COLOUR","SortingVisualizer","props","state","this","className","map","value","idx","style","backgroundColor","height","ButtonGroup","vertical","Button","variant","onClick","setArray","bubbleSortVisuals","quickSortVisuals","mergeSortVisuals","heapSortVisuals","a","swapped","len","bubbleSort","arrayBars","document","getElementsByClassName","indexOne","indexTwo","barOneStyle","barTwoStyle","colour","setTimeout","barOneIndex","barTwoIndex","barOne","barTwo","pivotBar","barLeft","barRight","pivotStyle","leftStyle","rightStyle","barOneIdx","barTwoIdx","color","newHeight","random","setState","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.261204ca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","var animations = [];\r\n\r\nexport function quicksortHelper(array){\r\n    animations.length = 0;\r\n    quicksort(array, 0, array.length-1);\r\n    return animations; // [[pivot, left, right], 0 or 1]\r\n}\r\n\r\nfunction swap(array, i, j) {\r\n    var temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n}\r\n\r\n\r\nfunction quicksort(array, left, right) {\r\n   if(left >= right){\r\n       return;\r\n   }\r\n   let pivot = partition(array, left, right);\r\n   quicksort(array, left, pivot-1);\r\n   quicksort(array, pivot+1, right);\r\n}\r\n\r\n\r\nfunction partition(array, left, right) {\r\n    let pivotIndex = left;\r\n    let pivotValue = array[right];\r\n\r\n    for(let i = left; i < right; i++){\r\n        if(array[i] < pivotValue){\r\n            swap(array, i, pivotIndex);\r\n            // i and the pivot index are the indices of the values being compared,\r\n            // so they are pushed twice. The 0 indicates a change of colour and\r\n            // swap. The 1 indicates a change back to the default colour.\r\n            animations.push([[pivotIndex, i, pivotIndex], 0]);\r\n            animations.push([[pivotIndex, i, pivotIndex], 1]);\r\n            pivotIndex++;\r\n        }\r\n    }\r\n\r\n    swap(array, pivotIndex, right);\r\n    // Push these values twice to change their colour, swap the\r\n    // values at pivotIndex and right, and then change their colour back\r\n    // to the default.\r\n    animations.push([[pivotIndex, pivotIndex, right], 0]);\r\n    animations.push([[pivotIndex, pivotIndex, right], 1]);\r\n    return pivotIndex;\r\n}\r\n\r\n","export function mergeSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // i and j are the indices being compared, push once to change colour.\r\n      animations.push([i, j]);\r\n      // Push them again to revert their colour to the default.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n\r\n    while (i <= middleIdx) {\r\n      // Push once to change colour.\r\n      animations.push([i, i]);\r\n      // Push a second time to revert the colour back to the default.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    \r\n    while (j <= endIdx) {\r\n      // Push once to change colour.\r\n      animations.push([j, j]);\r\n      // Push again to revert the colour back to the default.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","var animations = [];\r\n\r\nexport function heapSortHelper(array){\r\n    animations.length = 0;\r\n    heapSort(array);\r\n    return animations; // [[indexOne, indexTwo], 0 or 1 or 2]\r\n}\r\n\r\nfunction heapSort(array){\r\n    let n = array.length;\r\n    let i = Math.floor(n/2 - 1);\r\n    let k = n-1;\r\n\r\n    while(i >= 0){\r\n        heapify(array, n, i);\r\n        i--;\r\n    }\r\n\r\n    while(k >= 0){\r\n        // Push the values that are being swapped 3 \r\n        animations.push([[k, 0], 0]);\r\n        animations.push([[k, 0], 1]);\r\n        //animations.push([[k, 0], 2]);\r\n        [array[k], array[0]] = [array[0], array[k]];\r\n        heapify(array, k, 0);\r\n        k--;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\n\r\nfunction heapify(array, length, i){\r\n    var left = 2*i + 1;\r\n    var right = 2*i + 2;\r\n    var max = i;\r\n\r\n    if(left < length && array[left] > array[max]){\r\n        max = left;\r\n    }\r\n    \r\n    if(right < length && array[right] > array[max]){\r\n        max = right;\r\n    }\r\n\r\n    if(max != i){\r\n        [array[i], array[max]] = [array[max], array[i]];\r\n        animations.push([[i, max], 0]);\r\n        animations.push([[i, max], 1]);\r\n        //animations.push([[i, max], 2]);\r\n        heapify(array, length, max);\r\n    }\r\n    \r\n    return array;\r\n}\r\n","import React from 'react';\r\nimport './sortingVisualizer.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport {bubbleSort} from '../sorting_algorithms/bubbleSort.js';\r\nimport {quicksortHelper} from '../sorting_algorithms/quickSort.js';\r\nimport {mergeSort} from '../sorting_algorithms/mergeSort.js';\r\nimport {heapSortHelper} from '../sorting_algorithms/heapSort.js';\r\n\r\n// Wait time in ms for bubble sort\r\nconst WAIT_TIME_BUBBLE = 5;\r\n\r\n// Wait time in ms for quick sort\r\nconst WAIT_TIME_QUICK = 50;\r\n\r\n// Wait time in ms for merge sort\r\nconst WAIT_TIME_MERGE = 30;\r\n\r\n// Wait time in ms for heap sort\r\nconst WAIT_TIME_HEAP = 30;\r\n\r\n// Default colour for the bars\r\nconst DEFAULT_BACKGROUND = 'MediumAquaMarine';\r\n\r\n// Color of array bars that are being compared\r\nconst SWITCH_COLOUR = 'HotPink';\r\n\r\n// Colour of array bar that acts as a pivot\r\nconst PIVOT_COLOUR = 'Plum';\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array : []\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n        return(\r\n            <div>\r\n                <div className = 'array-container'>\r\n                    {array.map((value, idx) => (\r\n                        <div className = 'array-element' \r\n                            key={ idx }\r\n                            style = {{\r\n                                backgroundColor: DEFAULT_BACKGROUND,\r\n                                height: `${ value }px`,\r\n                            }}> \r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className='button-container'>\r\n                    <ButtonGroup vertical>\r\n                        <Button variant='secondary' onClick = {() => this.setArray()}>Reset Array</Button>\r\n                        <Button variant='secondary' onClick = {() => this.bubbleSortVisuals()}>Bubble Sort</Button>\r\n                        <Button variant='secondary' onClick = {() => this.quickSortVisuals()}>Quick Sort</Button>\r\n                        <Button variant='secondary' onClick = {() => this.mergeSortVisuals()}>Merge Sort</Button>\r\n                        <Button variant='secondary' onClick = {() => this.heapSortVisuals()}>Heap Sort</Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    bubbleSortVisuals(){\r\n        const animations = bubbleSort(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){  \r\n            const arrayBars = document.getElementsByClassName('array-element');\r\n            // Animations is a 2D array, if the value at index [i][1] is a 1,\r\n            // there is a swap of values, else there is a colour change.\r\n            const colourChange = animations[i][1] !== 1;\r\n            if(colourChange){\r\n                const [indexOne, indexTwo] = animations[i][0];\r\n                const barOneStyle = arrayBars[indexOne].style;\r\n                const barTwoStyle = arrayBars[indexTwo].style;\r\n                const colour = animations[i][1] === 0 ? SWITCH_COLOUR:DEFAULT_BACKGROUND;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = colour;\r\n                    barTwoStyle.backgroundColor = colour;\r\n                }, WAIT_TIME_BUBBLE*i);\r\n            }else{\r\n                const [barOneIndex, barTwoIndex] = animations[i][0];\r\n                const barOne = arrayBars[barOneIndex];\r\n                const barTwo = arrayBars[barTwoIndex];\r\n                setTimeout(() => {\r\n                    let temp = barOne.style.height;\r\n                    barOne.style.height = barTwo.style.height;\r\n                    barTwo.style.height = temp;\r\n                }, WAIT_TIME_BUBBLE*i);\r\n            }\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    quickSortVisuals(){\r\n        const animations = quicksortHelper(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-element');\r\n            const [pivotBar, barLeft, barRight] = animations[i][0];\r\n            const pivotStyle = arrayBars[pivotBar].style;\r\n            const leftStyle = arrayBars[barLeft].style;\r\n            const rightStyle = arrayBars[barRight].style;\r\n            if(animations[i][1] == 0){\r\n                setTimeout(() => {\r\n                    leftStyle.backgroundColor = SWITCH_COLOUR;\r\n                    rightStyle.backgroundColor = SWITCH_COLOUR;\r\n                    pivotStyle.backgroundColor = PIVOT_COLOUR;\r\n                    let temp = leftStyle.height;\r\n                    leftStyle.height = rightStyle.height;\r\n                    rightStyle.height = temp;\r\n                }, WAIT_TIME_QUICK*i);\r\n            }else if(animations[i][1] == 1){\r\n                setTimeout(() => {\r\n                    pivotStyle.backgroundColor = DEFAULT_BACKGROUND;\r\n                    leftStyle.backgroundColor = DEFAULT_BACKGROUND;\r\n                    rightStyle.backgroundColor = DEFAULT_BACKGROUND;\r\n                }, WAIT_TIME_QUICK*i);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    mergeSortVisuals(){\r\n        const animations = mergeSort(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-element');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n              const [barOneIdx, barTwoIdx] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              const barTwoStyle = arrayBars[barTwoIdx].style;\r\n              const color = i % 3 === 0 ? SWITCH_COLOUR : DEFAULT_BACKGROUND;\r\n              setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n              }, i * WAIT_TIME_MERGE);\r\n            } else {\r\n              setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n              }, i * WAIT_TIME_MERGE);\r\n            }\r\n          }\r\n       \r\n    }\r\n\r\n    heapSortVisuals(){\r\n        const animations = heapSortHelper(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){  \r\n            const arrayBars = document.getElementsByClassName('array-element');\r\n            const [indexOne, indexTwo] = animations[i][0];\r\n            const barOneStyle = arrayBars[indexOne].style;\r\n            const barTwoStyle = arrayBars[indexTwo].style;\r\n            if(animations[i][1] == 0){\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SWITCH_COLOUR;\r\n                    barTwoStyle.backgroundColor = SWITCH_COLOUR;\r\n                    let temp = barOneStyle.height;\r\n                    barOneStyle.height = barTwoStyle.height;\r\n                    barTwoStyle.height = temp;\r\n                }, WAIT_TIME_HEAP*i);\r\n            }else{\r\n                setTimeout(() => {\r\n                   barOneStyle.backgroundColor = DEFAULT_BACKGROUND;\r\n                   barTwoStyle.backgroundColor = DEFAULT_BACKGROUND;\r\n                }, WAIT_TIME_HEAP*i);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setArray();\r\n    }\r\n\r\n    setArray(){\r\n        const array = []\r\n        for(let i = 0; i < 100; i++){\r\n            array.push(randomInt());\r\n        }\r\n        this.setState({array : array});\r\n    }\r\n\r\n}\r\n\r\nfunction randomInt(){\r\n    return  Math.floor(Math.random() * (500 - 5 + 1)) + 5;\r\n}","export function bubbleSort(a){\r\n    let len = a.length;\r\n    let swapped;\r\n    const animations = [];\r\n    do {\r\n        swapped = false;\r\n        // 0 for switch colour to SWITCH_COLOUR\r\n        // 1 for swap heights\r\n        // 2 for switch back to DEFAULT_COLOUR\r\n        for (let i = 0; i < len-1; i++) {\r\n            animations.push([[i, i+1], 0]);\r\n            if (a[i] > a[i + 1]) {\r\n                let temp = a[i];\r\n                a[i] = a[i + 1];\r\n                a[i + 1] = temp;\r\n                swapped = true;\r\n                animations.push([[i, i+1], 1]);\r\n            }\r\n            animations.push([[i, i+1], 2]);\r\n        }\r\n    } while (swapped);\r\n    return animations; \r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './sorting_visualizer/sortingVisualizer.jsx';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}